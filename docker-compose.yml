version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: url-shortener-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: url_shortener
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - url-shortener-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: url-shortener-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - url-shortener-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: url-shortener-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/url_shortener?schema=public"
      REDIS_URL: "redis://redis:6379"
      JWT_SECRET: "your-super-secret-jwt-key-change-this-in-production"
      JWT_REFRESH_SECRET: "your-super-secret-refresh-key-change-this-in-production"
      FRONTEND_URL: "http://localhost:3000"
      NODE_ENV: "production"
    depends_on:
      - postgres
      - redis
    networks:
      - url-shortener-network
    volumes:
      - ./backend:/app
      - /app/node_modules

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: url-shortener-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_APP_URL: "http://localhost:3000"
      NEXT_PUBLIC_API_URL: "http://localhost:3001"
    depends_on:
      - backend
    networks:
      - url-shortener-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
  redis_data:

networks:
  url-shortener-network:
    driver: bridge

